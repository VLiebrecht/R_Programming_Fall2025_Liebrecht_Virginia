Frequency     <- c(0.6, 0.3, 0.4, 0.4, 0.2, 0.6, 0.3, 0.4, 0.9, 0.2)
BloodPressure <- c(103, 87, 32, 42, 59, 109, 78, 205, 135, 176)
FirstAssess   <- c(1, 1, 1, 1, 0, 0, 0, 0, NA, 1)    # bad=1, good=0
SecondAssess  <- c(0, 0, 1, 1, 0, 0, 1, 1, 1, 1)    # low=0, high=1
FinalDecision <- c(0, 1, 0, 1, 0, 1, 0, 1, 1, 1)    # low=0, high=1
df_hosp <- data.frame(
Frequency, BloodPressure, FirstAssess,
SecondAssess, FinalDecision, stringsAsFactors = FALSE
)
# Inspect and handle NA:
summary(df_hosp)
df_hosp <- na.omit(df_hosp)
View(df_hosp)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylab = "Blood Pressure",
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Final Decision"
)
hist(
breaks = 8,
hist(
df_hosp$BloodPressure,
breaks = 8,
xlab = "Blood Pressure",
main = "Histogram of Blood Pressure")
#Defining Vectors
Frequency     <- c(0.6, 0.3, 0.4, 0.4, 0.2, 0.6, 0.3, 0.4, 0.9, 0.2)
BloodPressure <- c(103, 87, 32, 42, 59, 109, 78, 205, 135, 176)
FirstAssess   <- c(1, 1, 1, 1, 0, 0, 0, 0, NA, 1)    # bad=1, good=0
SecondAssess  <- c(0, 0, 1, 1, 0, 0, 1, 1, 1, 1)    # low=0, high=1
FinalDecision <- c(0, 1, 0, 1, 0, 1, 0, 1, 1, 1)    # low=0, high=1
#Turn into dataframe
df_hosp <- data.frame(
Frequency, BloodPressure, FirstAssess,
SecondAssess, FinalDecision, stringsAsFactors = FALSE
)
# Inspect
summary(df_hosp)
#Turn into dataframe
df_hosp <- data.frame(
Frequency, BloodPressure, FirstAssess,
SecondAssess, FinalDecision, stringsAsFactors = FALSE
)
#Defining Vectors
Frequency     <- c(0.6, 0.3, 0.4, 0.4, 0.2, 0.6, 0.3, 0.4, 0.9, 0.2)
#Turn into dataframe
df_hosp <- data.frame(
Frequency, BloodPressure, FirstAssess,
SecondAssess, FinalDecision, stringsAsFactors = FALSE
)
# Inspect
summary(df_hosp)
View(df_hosp)
#Remove row with NA
df_hosp <- na.omit(df_hosp)
summary(df_hosp)
##Visualizations
# Boxplot of Blood Pressure: First Assessment
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylab = "Blood Pressure",
main = "BP by First MD Assessment"
)
# Boxplot of Blood Pressure: Second Assessment
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Second MD Assessment"
)
# Boxplot of Blood Pressure: Final Decision
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Final Decision"
)
# Histogram of Frequency Distribution
hist(
df_hosp$Frequency,
breaks = seq(0, 1, by = 0.1),
xlab = "Visit Frequency",
main = "Histogram of Visit Frequency"
)
# Histogram of Blood Pressure Distribution
hist(
df_hosp$BloodPressure,
breaks = 8,
xlab = "Blood Pressure",
main = "Histogram of Blood Pressure")
#Defining Vectors
Frequency     <- c(0.6, 0.3, 0.4, 0.4, 0.2, 0.6, 0.3, 0.4, 0.9, 0.2)
BloodPressure <- c(103, 87, 32, 42, 59, 109, 78, 205, 135, 176)
FirstAssess   <- c(1, 1, 1, 1, 0, 0, 0, 0, NA, 1)    # bad=1, good=0
SecondAssess  <- c(0, 0, 1, 1, 0, 0, 1, 1, 1, 1)    # low=0, high=1
FinalDecision <- c(0, 1, 0, 1, 0, 1, 0, 1, 1, 1)    # low=0, high=1
#Turn into dataframe
df_hosp <- data.frame(
Frequency, BloodPressure, FirstAssess,
SecondAssess, FinalDecision, stringsAsFactors = FALSE
)
# Inspect
summary(df_hosp)
#Remove row with NA
df_hosp <- na.omit(df_hosp)
summary(df_hosp)
##Visualizations
# Boxplot of Blood Pressure: First Assessment
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylab = "Blood Pressure",
main = "BP by First MD Assessment"
)
# Boxplot of Blood Pressure: Second Assessment
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Second MD Assessment"
)
# Boxplot of Blood Pressure: Final Decision
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
ylab = "Blood Pressure",
main = "BP by Final Decision"
)
# Histogram of Frequency Distribution
hist(
df_hosp$Frequency,
breaks = seq(0, 1, by = 0.1),
xlab = "Visit Frequency",
main = "Histogram of Visit Frequency"
)
# Histogram of Blood Pressure Distribution
hist(
df_hosp$BloodPressure,
breaks = 8,
xlab = "Blood Pressure",
main = "Histogram of Blood Pressure")
# ASSIGNMENT 5-- MATRICES, INVERSES, AND DETERMINANTS
# Create the Matrices
A <- matrix(1:100,  nrow = 10)
B <- matrix(1:1000, nrow = 10)
#Inspect dimensions
dim(A)  # should be 10 × 10
dim(B)  # 10 × 100 — not square
#compute inverse and determinant
# For A
invA <- solve(A)
detA <- det(A)
# For B, use tryCatch to capture errors
invB <- tryCatch(solve(B), error = function(e) e)
detB <- tryCatch(det(B),   error = function(e) e)
# ASSIGNMENT 5-- MATRICES, INVERSES, AND DETERMINANTS
# Create the Matrices
A <- matrix(1:100,  nrow = 10)
B <- matrix(1:1000, nrow = 10)
#Inspect dimensions
dim(A)  # should be 10×10
dim(B)  # 10×100 — not square
#compute inverse and determinant
# For A
invA <- solve(A)
detA <- det(A)
# For B, use tryCatch to capture errors
invB <- tryCatch(solve(B), error = function(e) e)
detB <- tryCatch(det(B),   error = function(e) e)
View(B)
#create function to evaluate without error
invA <- function(expr) tryCatch(expr, error = function(e) e)
#create function to evaluate without error
functionA <- function(expr) tryCatch(expr, error = function(e) e)
#recompute for A
invA <-functionA(solve(A))
detA <-det(A)
# For B, use tryCatch to capture errors
invB <- tryCatch(solve(B), error = function(e) e)
detB <- tryCatch(det(B),   error = function(e) e)
View(invA)
View(invA)
invA
View(invB)
#edit to deal with errors
invA <-tryCatch(solve(A), error=function(e) e)
detA <- tryCatch(det(A), error=function(e) e)
invA
#Inspect dimensions
dim(A)  # should be 10×10
dim(B)  # 10×100 — not square
# For B, use tryCatch to capture errors
invB <- tryCatch(solve(B), error = function(e) e)
detB <- tryCatch(det(B),   error = function(e) e)
invA
detA
invB
detB
#compute inverse and determinant
# For A
invA <- solve(A)
detA <- det(A)
#edit to deal with errors
invA <-tryCatch(solve(A), error=function(e) e)
detA <- tryCatch(det(A), error=function(e) e)
